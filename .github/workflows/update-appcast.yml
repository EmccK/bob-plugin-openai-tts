name: Update Appcast

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  update-appcast:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.repository.default_branch }}
        
    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq
      
    - name: Update appcast.json
      run: |
        # 获取release信息
        RELEASE_TAG="${{ github.event.release.tag_name }}"
        VERSION_NUMBER="${RELEASE_TAG#v}"
        TIMESTAMP=$(date +%s)000
        
        # 获取release中的.bobplugin文件URL和SHA256
        DOWNLOAD_URL=""
        SHA256=""
        
        # 从release assets中查找.bobplugin文件
        for asset in $(echo '${{ toJson(github.event.release.assets) }}' | jq -r '.[].browser_download_url'); do
          if [[ "$asset" == *".bobplugin" ]]; then
            DOWNLOAD_URL="$asset"
            break
          fi
        done
        
        if [ -z "$DOWNLOAD_URL" ]; then
          echo "Error: No .bobplugin file found in release assets"
          exit 1
        fi
        
        # 下载文件并计算SHA256
        curl -L -o temp.bobplugin "$DOWNLOAD_URL"
        SHA256=$(sha256sum temp.bobplugin | cut -d' ' -f1)
        rm temp.bobplugin
        
        echo "Version: $VERSION_NUMBER"
        echo "Download URL: $DOWNLOAD_URL"
        echo "SHA256: $SHA256"
        
        # 创建新的版本条目JSON
        NEW_VERSION_JSON=$(jq -n \
          --arg version "$VERSION_NUMBER" \
          --arg desc "版本 $VERSION_NUMBER 发布" \
          --arg sha256 "$SHA256" \
          --arg url "$DOWNLOAD_URL" \
          --arg minBobVersion "1.8.0" \
          --argjson timestamp "$TIMESTAMP" \
          '{
            version: $version,
            desc: $desc,
            sha256: $sha256,
            url: $url,
            minBobVersion: $minBobVersion,
            timestamp: $timestamp
          }')
        
        # 更新appcast.json
        if [ -f appcast.json ]; then
          # 如果文件存在，添加新版本到开头，并移除重复版本
          jq --argjson newVersion "$NEW_VERSION_JSON" \
             --arg currentVersion "$VERSION_NUMBER" \
             '.versions = [$newVersion] + (.versions | map(select(.version != $currentVersion)))' \
             appcast.json > appcast_temp.json && mv appcast_temp.json appcast.json
        else
          # 如果文件不存在，创建新文件
          jq -n \
             --argjson newVersion "$NEW_VERSION_JSON" \
             '{
               identifier: "com.emcck.bob.tts",
               versions: [$newVersion]
             }' > appcast.json
        fi
        
        echo "Updated appcast.json with version $VERSION_NUMBER"
        
    - name: Commit and push changes
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "Auto-update appcast.json for ${{ github.event.release.tag_name }}"
        file_pattern: appcast.json
        commit_user_name: GitHub Action
        commit_user_email: action@github.com
